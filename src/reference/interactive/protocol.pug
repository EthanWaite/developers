include ../../mixins.pug
h1#interactive__connection Connection
p.
    To make a connection you first need to have an authenticated session with our
    #[a(href='#') Rest API]. Once you have one you make a #[code GET] request to
    #[code /tetris/{channel}/robot] where #[code channel] is the channel id of the
    channel you wish to connect to.
include ../../tutorials/channelid.pug
p.
    In response to the request you'll recieve a WebSocket address and a key:
+highlightFile('json','./tutorials/code/node/interactive/2_response.json')

p.
    A connection should then be made to the recieved address and the key and
    channel id must be included in the #[code Handshake] packet.

h1(id='interactive__flow') Data Flow

p Then general protocol flow is the following:

pre
    include ./protocol.ascii
ol
    li The Client establishes a TCP connection to the server. It sends a Handshake packet, populated with the channel ID and auth key.
    li Beam Interactive verifies the key. If it's correct, a blank HandshakeACK packet is sent. If it's not correct, an Error packet is sent down.
    li Beam Interactive repeatedly sends Reports down to the Client every #[code reportInterval].
    li The Client can send Progress Updates to the Server at it's discretion.

h1(id='interactive__packets') Packets
p.
    Protocol Buffer Packets start with their length followed by their packet ID,
    formatted as variable length unsigned integers.
    (Note that the length refers to the encoded protobuf data, not including the
     packet ID or the length itself.) Variable integers are described in the
    #[a(href='https://developers.google.com/protocol-buffers/docs/encoding#varints') protocol buffer specification].

p A single packet can be represented as follows:
pre.
    ┌───────────────────────┐
    │Packet Length (varuint)│
    └───────────────────────┘
    ┌───────────────────────┐
    │  Packet ID (varuint)  │
    └───────────────────────┘
    ┌───────────────────────┐
    │      Packet Data      │
    │   (protocol buffer)   │
    .........................
p.
    The protocol is bi-directional. Beam Interactive expects information sent
    to it to be encoded in prescribed format, and it will in turn send
    information in the same format.
p.
    Packet ID mapping is as follows:
table.table
    tr
        th ID
        th Packet
    tr
        td 0
        td #[a(href='#interactive__type__tetris.Handshake') Handshake]
    tr
        td 1
        td #[a(href='#interactive__type__tetris.HandshakeACK') HandshakeACK]
    tr
        td 2
        td #[a(href='#interactive__type__tetris.Report') Report]
    tr
        td 3
        td #[a(href='#interactive__type__tetris.Error') Error]
    tr
        td 4
        td #[a(href='#interactive__type__tetris.ProgressUpdate') Progress Update]
h1(id='interactive__messages') Messages
p.
    Each packet contains a message that corresponds to its Packet ID. Messages can be nested inside each other but only when the protocol specification allows for it. The full raw protocol specification can be found #[a(href='proto/tetris.proto') here].
p.
include ./proto/doc/content.pug
